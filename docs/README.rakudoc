=begin pod

=head1 NAME

B<RakuDoc::Utils> - Provides routines to extract RakuDoc and convert to classes for further word processing.

=head1 SYNOPSIS

=begin code :lang<raku>
use RakuDoc::Utils;
#...user code
=end code

=head1 DESCRIPTION

B<RakuDoc::Utils> is designed to simplify extracting RakuDoc from a file
and converting it to a user-friendly tree structure for further processing.

It is intended primarily to be used in PDF document production, but it
could also be useful in other roles.
Note it currently has limited capability, and the author has implemented
features in the order most useful to his other projects.

=head3 Terminology

For typesetting, we need to sometimes handle pieces of text that do not
fit our perception of a "word." For example, we sometmes have to
hyphenate a word in order to split it if a line of text is too long. In
that event, we need a way to handle that programmatically. We shall
call such pieces "atoms." An atom may or may not contain spaces, but this
module will not normally include spaces in its atoms.

This module provides the following capabilities:

=head3 Extract RakuDoc from a block of text

The text can be in a string or a file. The text can have formatting codes,
which may be nested to apply multple styling on an atom of text.
Note the text could come from any of the other RakuDoc node types which
can be selectively extracted with the aid of module C<Pod::TreeWalker>.

The following Formatting codes are currently handled: 

=item2 B - bold font
=item2 I - italic (oblique) font
=item2 U - underline text
=item2 O - overline text
=item2 M - strikethrough text
=item2 C - code (uses a monospaced font)
=item2 L - link (may have two parts separated with '|')
=item2 N - note (may be styled)
=item2 E - Unicode character (may be styled))
=item2 V - verbatim text
=item2 X - index entry (may have two parts separated with '|')

Following is an example of an almost-properly formatted block of text and its
parsing into a list of individual words with unneeded spaces removed:

Input (with extraneous but allowable spaces):

=begin code
 B < I < one > > and
    U < I < two > > 
=end code

Output (with extraneous spaces removed):

=begin code
B<I<one>> and U<I<two>> 
=end code

Any C<blank> lines break up the text into lines:

=begin code
B<I<one>> 
and 

U<I<two>> 
=end code

becomes:

=begin code
B<I<one>> and 
U<I<two>> 
=end code

=head3 Parse the text into a list of C<Atom> objects

Class Atom encapsulates the format details of the text atoms
to pass to a using routine for further processing.

=begin code
 Atom {
    has @.attrs is required is rw = []; # the attributes
    has $.text  is required is rw = "";
    has $.style is rw = "";

    submethod TWEAK {
        $!style = @!attrs.join;
    }

    method debug-print {
        my $txt   = "";
        my $front = "";
        my $back  = "";
        for @!attrs.reverse -> $a {
            $front ~= "{$a}<";
        }
        for @!attrs.reverse -> $a {
            $back ~= ">";
        }
        $txt = $front ~ $!text ~ $back;
    }
} 
=end code

=head2 Planned features

=item Break a RakuDoc document into "slices" for individual, serial
node handling. Slices may have child slices to account for nested
nodes such as mutilevel lists, paragraphs, and references.
=item Provide higher level RakuDoc node extraction

=head2 See also

=item PDF::Lite
=item PDF::Document

=head1 AUTHOR

Tom Browder <tbrowder@acm.org>

=head1 COPYRIGHT AND LICENSE

Â© 2025 Tom Browder

This library is free software; you may redistribute it or modify it under the Artistic License 2.0.

=end pod
